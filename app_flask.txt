from flask import Flask,render_template,request
import torch
import fibrose_model
import torchvision.models as models
from PIL import Image
import torchvision.transforms as transforms
from PIL import ImageFilter
model = fibrose_model.LitModel((3,329,375), 2,"resnet")
model.load_state_dict(torch.load('weights.pt',map_location='cpu'),strict=False)
model.eval()

def predict(path):
      augmentation = transforms.Compose([
              transforms.RandomHorizontalFlip(),
              transforms.Normalize([0.485, 0.456, 0.406],[0.229, 0.224, 0.225])
        ])
      transform = transforms.Compose([
              transforms.Resize(size=(329, 375)),
              transforms.ToTensor(),
              transforms.Normalize([0.485, 0.456, 0.406],[0.229, 0.224, 0.225])
        ])
      im=Image.open(path)
      im = im.filter(ImageFilter.SMOOTH)
      im = transform(im)
      # im = augmentation(im)
      reshaped = im.unsqueeze(0)
      pred=model(reshaped)
      prediction = int(torch.max(pred.data, 1)[1].numpy())
      return prediction

app = Flask(__name__,template_folder='templates')
@app.route("/",methods=["GET","POST"])
def main():
  return render_template("index.html")
@app.route("/home")
def about_page():
  return render_template("home.html")
@app.route("/submit",methods=["GET","POST"])
def get_submit():
  p=1
  img_path=""
  if request.method =='POST':
    img=request.files['my-image']
    img_path='static/'+img.filename
    img.save(img_path)    
    p=predict(img)
  return render_template("index.html",prediction=p,img_path=img_path)
if __name__=='__name__':
    app.run(host='0.0.0.0',port=5000)